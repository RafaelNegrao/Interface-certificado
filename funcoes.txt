from PyQt5 import QtCore, QtGui, QtWidgets,Qt
from PyQt5.QtWidgets import QTableWidgetItem,QTableWidget,QApplication
from PyQt5.QtCore import QDate, QTime,QUrl
import datetime
import requests
from winotify import Notification
import json
from PyQt5.QtGui import QDesktopServices
import pandas as pd
import os
#import resources_from_qt_rc


def procurar_cnh():
    url = QUrl("https://sso.acesso.gov.br/login?client_id=portalservicos.denatran.serpro.gov.br&authorization_id=18aa635cf94")
    QDesktopServices.openUrl(url)
    return


def procurar_oab():
    url = QUrl("https://cna.oab.org.br/")
    QDesktopServices.openUrl(url)
    return

def procurar_rg():
    url = QUrl("http://www.teledocumentos.com.br/sistema2/")
    QDesktopServices.openUrl(url)
    return

def procurar_cnpj():
    cnpj = ui.campo_cnpj.text()
    url = QUrl(f"https://solucoes.receita.fazenda.gov.br/servicos/cnpjreva/Cnpjreva_Solicitacao.asp?cnpj={cnpj}")
    QDesktopServices.openUrl(url)
    return

def procurar_cpf():
    
    cpf = ui.campo_cpf.text()
    nascimento = ui.campo_data_nascimento.text()
    if not nascimento == "01/01/2000":
        url = QUrl(f"https://servicos.receita.fazenda.gov.br/Servicos/CPF/ConsultaSituacao/ConsultaPublica.asp?cpf={cpf}&Nascimento={nascimento}")
        QDesktopServices.openUrl(url)
        return
    else:
        url = QUrl(f"https://servicos.receita.fazenda.gov.br/Servicos/CPF/ConsultaSituacao/ConsultaPublica.asp?cpf={cpf}")
        QDesktopServices.openUrl(url)
        return



def formatar_cpf():
    cpf = ui.campo_cpf.text()
    if len(cpf) == 11:
        a = cpf[:3]
        b = cpf[3:6]
        c = cpf[6:9]
        d = cpf[9:11]
        cpf_formatado = f"{a}.{b}.{c}-{d}"
        ui.campo_cpf.clear()
        ui.campo_cpf.setText(cpf_formatado)
        ui.campo_digito_cpf.setText(cpf_formatado[-2:])
#digito_cpf =  cpf[-2:]
    elif len(cpf) <= 11 and len(cpf) > 0:
        cpf_formatado = cpf.zfill(11)
        a = cpf_formatado[:3]
        b = cpf_formatado[3:6]
        c = cpf_formatado[6:9]
        d = cpf_formatado[9:11]
        cpf_formatado = f"{a}.{b}.{c}-{d}"
        ui.campo_cpf.setText("")
        ui.campo_cpf.setText(cpf_formatado)
        ui.campo_digito_cpf.setText(cpf_formatado[-2:])
    elif len(cpf)== "":
        return

def formatar_rg():
    rg = ui.campo_rg.text()
    if len(rg) == 8:
        rg_formatado = rg.zfill(9)
        a = rg_formatado[:2]
        b = rg_formatado[2:5]
        c = rg_formatado[5:8]
        d = rg_formatado[8:9]
        rg_formatado = f"{a}.{b}.{c}-{d}"
        ui.campo_rg.setText("")
        ui.campo_rg.setText(rg_formatado)
        ui.campo_digito_rg.setText(rg_formatado[-1:])

    elif len(rg) == 9:
        a = rg[:2]
        b = rg[2:5]
        c = rg[5:8]
        d = rg[8:9]
        rg_formatado = f"{a}.{b}.{c}-{d}"
        ui.campo_rg.setText("")
        ui.campo_rg.setText(rg_formatado)
        ui.campo_digito_rg.setText(rg_formatado[-1:])

def formatar_data_nascimento():
    nascimento = ui.campo_data_nascimento.text()
    ui.campo_digito_ano.setText(nascimento[6:10])

def formatar_cnpj():
    
    cnpj = ui.campo_cnpj.text()
    #if len(cnpj) == 11: 
    a = cnpj[:2]
    b = cnpj[2:5]
    c = cnpj[5:8]
    d = cnpj[8:12]
    e = cnpj[12:14]
    cnpj_formatado = f"{a}.{b}.{c}/{d}-{e}"
    ui.campo_cnpj.setText("")
    ui.campo_cnpj.setText(cnpj_formatado)
    
def gravar_dados():

    num_pedido = ui.campo_pedido.text()
    link = "https://bdpedidos-2078f-default-rtdb.firebaseio.com/"
    requisicao = requests.get(f'{link}.json')
    req = requisicao.json()

    for id in req:
        pedido_servidor = req[id]['Pedido']
        if num_pedido == pedido_servidor and ui.campo_lista_status.currentText() != "":
            pedido = ui.campo_pedido.text()
            tipo = ui.campo_certificado.text()
            hora  = ui.campo_hora_agendamento.text()
            data = ui.campo_data_agendamento.text()
            status = ui.campo_lista_status.currentText()
            dados_atualizados = {"Pedido":pedido , "Data":data, "Hora":hora, "Tipo":tipo, "Status":status}
            requests.patch(f'{link}{id}.json',data = json.dumps(dados_atualizados))
            limpar_campos()
            notificacao = Notification(app_id="Pedido Atualizado",title="",msg=f"Os dados do pedido {pedido} foram atualizados!")
            notificacao.show()
            return
    
    pedido = ui.campo_pedido.text()
    tipo = ui.campo_certificado.text()
    hora = ui.campo_hora_agendamento.text()
    data = ui.campo_data_agendamento.text()
    status = ui.campo_lista_status.currentText()
    if pedido == "" or tipo == "" or hora == "" or data == "" or status == "":

        notificacao = Notification(app_id="Erro no Envio",title="",msg="Adicione os itens com üåü para Encerrar o pedido!")
        notificacao.show()
        return

    dados = {"Pedido":pedido , "Data":data, "Hora":hora, "Tipo":tipo,"Status":status}
    requests.post(f'{link}.json',data = json.dumps(dados))
    notificacao = Notification(app_id="Pedido enviado",title="",msg=f"Os dados do pedido {pedido} foram salvos!")
    notificacao.show()
    limpar_campos()   

def limpar_campos():
    ui.campo_pedido.setReadOnly(False)
    ui.campo_certificado.setReadOnly(False)
    ui.campo_nome.setText("")
    ui.campo_cpf.setText("") 
    ui.campo_rg.setText("")
    ui.campo_email.setText("")
    ui.campo_certificado.setText("")
    ui.campo_cnpj.setText("")
    ui.campo_digito_ano.setText("")
    ui.campo_digito_cpf.setText("")
    ui.campo_digito_rg.setText("")
    ui.campo_pedido.setText("")
    ui.campo_oab.setText("")
    ui.campo_novo_noBd.setText("")
    ui.campo_lista_status.setCurrentText("")
    data_nula = QDate(2000, 1, 1)  
    hora = QTime.fromString('00:00', "hh:mm")
    ui.campo_data_agendamento.setDate(data_nula)
    ui.campo_data_nascimento.setDate(data_nula)
    ui.campo_hora_agendamento.setTime(hora)
    ui.tableWidget.setRowCount(0)
    ui.label_quantidade_bd.setText("")
    ui.campo_oab.setText("")
    ui.campo_cnh.setText("")

def buscar_dados():
    try:
        link = "https://bdpedidos-2078f-default-rtdb.firebaseio.com/"
        requisicao = requests.get(f'{link}.json')
        req = requisicao.json()
        
        data_inicial = datetime.datetime.strptime(ui.campo_data_de.text(), "%d/%m/%Y")
        numero_inteiro_inicial = data_inicial.toordinal()
        data_final = datetime.datetime.strptime(ui.campo_data_ate.text(), "%d/%m/%Y")
        numero_inteiro_final = data_final.toordinal()

        dados_selecionados=[]
        x = 0
        for cliente in req:
            data_bd = datetime.datetime.strptime(req[cliente]['Data'], "%d/%m/%Y")
            numero_inteiro_bd = data_bd.toordinal()

            status_filtro = ui.campo_lista_status_2.currentText()
            status_servidor = req[cliente]['Status']

            if (numero_inteiro_inicial <= numero_inteiro_bd <= numero_inteiro_final):
                if status_filtro == status_servidor:
                
                    x += 1
                    pedido = req[cliente]['Pedido']
                    data_agendamento = req[cliente]['Data']
                    tipo_pedido = req[cliente]['Tipo']
                    hora_agendamento = req[cliente]['Hora']    
                    status_agendamento = req[cliente]['Status']

                    dados_selecionados.append((pedido, data_agendamento, tipo_pedido, hora_agendamento,status_agendamento))   

                elif status_filtro == "":
                    x += 1

                    pedido = req[cliente]['Pedido']
                    data_agendamento = req[cliente]['Data']
                    tipo_pedido = req[cliente]['Tipo']
                    hora_agendamento = req[cliente]['Hora']    
                    status_agendamento = req[cliente]['Status']
                    dados_selecionados.append((pedido, data_agendamento, tipo_pedido, hora_agendamento,status_agendamento)) 
        
        if x > 0:
            df=pd.DataFrame(dados_selecionados,columns=['Pedido','Data agendamento','Tipo de certificado','hora','Status Pedido'])
            data_agora = datetime.datetime.now().strftime("%d-%m-%Y %H-%M-%S")
            data_final = ui.campo_data_ate.text()
            data_inicial = ui.campo_data_de.text()
            pasta_desktop = os.path.expanduser("~\\Desktop")
            nome_arquivo = os.path.join(pasta_desktop, f"Certificados-emitidos-de {data_inicial.replace('/', '-')} a {data_final.replace('/', '-')}-gerado em{data_agora.replace('/','-')} .xlsx")
            df.to_excel(nome_arquivo, index=False)
            notificacao = Notification(app_id="Arquivo salvo",title="",msg=f"Arquivo excel salvo na √°rea de trabalho!")
            notificacao.show()
        else:
            notificacao = Notification(app_id="Sem dados",title="",msg=f"Sem dados para o per√≠odo!")
            notificacao.show()

    except Exception as e:
        print(e)
        notificacao = Notification(app_id="Arquivo n√£o salvo",title="",msg=f"Arquivo n√£o gerado!")
        notificacao.show()
        # Lida com exce√ß√µes aqui
        pass

def preencher_tabela():
    ui.tableWidget.setRowCount(0)
    try:
        ui.tableWidget.clear()
        link = "https://bdpedidos-2078f-default-rtdb.firebaseio.com/"
        requisicao = requests.get(f'{link}.json')
        req = requisicao.json()
        
        data_inicial = datetime.datetime.strptime(ui.campo_data_de.text(), "%d/%m/%Y")
        numero_inteiro_inicial = data_inicial.toordinal()
        data_final = datetime.datetime.strptime(ui.campo_data_ate.text(), "%d/%m/%Y")
        numero_inteiro_final = data_final.toordinal()
        status_filtro = ui.campo_lista_status_2.currentText()

        x = 0
        for cliente in req:

            data_bd = datetime.datetime.strptime(req[cliente]['Data'], "%d/%m/%Y")
            numero_inteiro_bd = data_bd.toordinal()
            status_filtro = ui.campo_lista_status_2.currentText()
            status_servidor = req[cliente]['Status']

            if (numero_inteiro_inicial <= numero_inteiro_bd <= numero_inteiro_final) :

                if status_filtro == status_servidor:
                
                    x += 1
                
                    row_position = ui.tableWidget.rowCount()
                    ui.tableWidget.insertRow(row_position)

                    ui.tableWidget.setItem(row_position, 0, QTableWidgetItem(req[cliente]['Pedido']))
                    ui.tableWidget.setItem(row_position, 1, QTableWidgetItem(req[cliente]['Data']))
                    ui.tableWidget.setItem(row_position, 2, QTableWidgetItem(req[cliente]['Tipo']))
                    ui.tableWidget.setItem(row_position, 3, QTableWidgetItem(req[cliente]['Hora']))
                    ui.tableWidget.setItem(row_position, 4, QTableWidgetItem(req[cliente]['Status']))
                    ui.label_quantidade_bd.setText(f"{x} resultados")
                elif status_filtro == "":
                    x += 1
                
                    row_position = ui.tableWidget.rowCount()
                    ui.tableWidget.insertRow(row_position)

                    ui.tableWidget.setItem(row_position, 0, QTableWidgetItem(req[cliente]['Pedido']))
                    ui.tableWidget.setItem(row_position, 1, QTableWidgetItem(req[cliente]['Data']))
                    ui.tableWidget.setItem(row_position, 2, QTableWidgetItem(req[cliente]['Tipo']))
                    ui.tableWidget.setItem(row_position, 3, QTableWidgetItem(req[cliente]['Hora']))
                    ui.tableWidget.setItem(row_position, 4, QTableWidgetItem(req[cliente]['Status']))
                    ui.label_quantidade_bd.setText(f"{x} resultados")

                
    except Exception as e:
        pass
    ui.label_quantidade_bd.setText(f"{x} resultados")
    ui.tableWidget.setHorizontalHeaderLabels(["N√öMERO PEDIDO", "DATA AGENDA", "TIPO", "HORA", "STATUS"])

def verificar_se_existe():
    
    try:   
        num_pedido = ui.campo_pedido.text()
        link = "https://bdpedidos-2078f-default-rtdb.firebaseio.com/"
        requisicao = requests.get(f'{link}.json')
        req = requisicao.json()


        for pedido in req:
            pedido_servidor = req[pedido]['Pedido']
            if num_pedido == pedido_servidor:
                ui.campo_pedido.setReadOnly(True)
                #traga os dados
                data = QDate.fromString(req[pedido]['Data'], "dd/MM/yyyy")
                hora = QTime.fromString(req[pedido]['Hora'], "hh:mm")

                ui.campo_novo_noBd.setText("‚úÖ")
                ui.campo_data_agendamento.setDate(data)
                ui.campo_hora_agendamento.setTime(hora)
                ui.campo_certificado.setText(req[pedido]['Tipo'])
                ui.campo_lista_status.setCurrentText(req[pedido]['Status'])
        
                return
    except Exception as e:
       
        # Lida com exce√ß√µes aqui
        pass
    ui.campo_novo_noBd.setText("")

def pegar_valor_tabela(event):
    item = ui.tableWidget.currentItem()  # Obtenha o item selecionado
    if item is not None:
        linha = item.row()
        coluna = item.column()
        valor = item.text()

        if coluna == 0 :    
            
            coluna_data = ui.tableWidget.item(linha, 1).text()
            coluna_tipo = ui.tableWidget.item(linha, 2).text()
            coluna_hora = ui.tableWidget.item(linha, 3).text()
            coluna_status = ui.tableWidget.item(linha, 4).text()

            data = QDate.fromString(coluna_data, "dd/MM/yyyy")
            hora = QTime.fromString(coluna_hora, "hh:mm")    
            ui.tabWidget.setCurrentIndex(0)
            ui.campo_pedido.setText(valor)
            ui.campo_data_agendamento.setDate(data)
            ui.campo_certificado.setText(coluna_tipo)
            ui.campo_hora_agendamento.setTime(hora)
            ui.campo_lista_status.setCurrentText(coluna_status)
            ui.campo_pedido.setReadOnly(True)
            ui.campo_novo_noBd.setText("‚úÖ")













if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    janela = QtWidgets.QMainWindow()
    ui = Ui_janela()
    ui.setupUi(janela)

    ui.botao_consultar.clicked.connect(preencher_tabela)
    ui.botao_terminar.clicked.connect(gravar_dados)
    ui.botao_procurar.clicked.connect(buscar_dados)
    ui.campo_cpf.editingFinished.connect(formatar_cpf)
    ui.campo_rg.editingFinished.connect(formatar_rg)
    ui.campo_pedido.editingFinished.connect(verificar_se_existe)
    ui.campo_digito_ano.setReadOnly(True)
    ui.campo_digito_cpf.setReadOnly(True)
    ui.campo_digito_rg.setReadOnly(True)
    ui.tableWidget.setEditTriggers(QTableWidget.NoEditTriggers)
    ui.campo_data_nascimento.editingFinished.connect(formatar_data_nascimento)
    ui.campo_cnpj.editingFinished.connect (formatar_cnpj)
    ui.botao_consulta_cnpj.clicked.connect(procurar_cnpj)
    ui.botao_consulta_cpf.clicked.connect(procurar_cpf)
    ui.botao_consulta_cnh.clicked.connect(procurar_cnh)
    ui.botao_consulta_oab.clicked.connect(procurar_oab)
    ui.botao_consulta_rg.clicked.connect(procurar_rg)
    ui.tableWidget.itemDoubleClicked.connect(pegar_valor_tabela)
    

    janela.setWindowTitle("Dados Certificado - Certisign")
    janela.setFixedSize(599, 693)
    janela.show()
    sys.exit(app.exec_())


    #comando cmd
    #pyuic5 -x interface.ui -o interface2.py